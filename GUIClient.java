import java.security.PublicKey;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;

import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author Jin
 */
public class GUIClient extends javax.swing.JFrame {
	/**
	 * 
	 */
	private static final long serialVersionUID = -6854191562461378337L;
	StringBuffer GSOutput = new StringBuffer();
	StringBuffer FSOutput = new StringBuffer();
	GroupClient groupClient = new GroupClient();
	FileClient fileClient = new FileClient();
	UserToken token = null;
	boolean FSConnected = false;
	boolean GSConnected = false;
	String userT = "";
	byte[] gSharedKey = null;
	byte[] fSharedKey = null;
	PublicKey groupServerKey;
	PublicKey fileServerKey;
	String fileServerName = null;

	/** Creates new form GUIClient */
	public GUIClient() {
		initComponents();
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        GSTA = new javax.swing.JTextArea();
        GSSubmit = new javax.swing.JButton();
        GSCommand = new javax.swing.JComboBox();
        FSCommand = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        usernameTF = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        GSConnect = new javax.swing.JButton();
        GSDisconnect = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        GSPortTF = new javax.swing.JTextField();
        FSConnect = new javax.swing.JButton();
        FSPortTF = new javax.swing.JTextField();
        FSDIsconnect = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        GSUsernameTF = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        FSTA = new javax.swing.JTextArea();
        FSSubmit = new javax.swing.JButton();
        GSGroupNameTF = new javax.swing.JTextField();
        FSSourceFileTF = new javax.swing.JTextField();
        FSDestFileTF = new javax.swing.JTextField();
        FSGroupNameTF = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        passwordTF = new javax.swing.JPasswordField();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        GSIPTF = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        FSIPTF = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Test");

        GSTA.setColumns(20);
        GSTA.setEditable(false);
        GSTA.setRows(5);
        jScrollPane1.setViewportView(GSTA);

        GSSubmit.setText("Submit");
        GSSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GSSubmitActionPerformed(evt);
            }
        });

        GSCommand.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Create User", "Delete User", "Create Group", "Delete Group", "Add User to Group", "Delete User from Group", "List Group Members" }));
        GSCommand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GSCommandActionPerformed(evt);
            }
        });

        FSCommand.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "List Files", "Upload", "Download", "Delete", " " }));
        FSCommand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FSCommandActionPerformed(evt);
            }
        });

        jLabel1.setText("Select Group Server Command");

        jLabel2.setText("Select File Server Command");

        usernameTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usernameTFActionPerformed(evt);
            }
        });

        jLabel3.setText("Username:");

        GSConnect.setText("Connect");
        GSConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GSConnectActionPerformed(evt);
            }
        });

        GSDisconnect.setText("Disconnect");
        GSDisconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GSDisconnectActionPerformed(evt);
            }
        });

        jLabel5.setText("Port:");

        GSPortTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GSPortTFActionPerformed(evt);
            }
        });

        FSConnect.setText("Connect");
        FSConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FSConnectActionPerformed(evt);
            }
        });

        FSPortTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FSPortTFActionPerformed(evt);
            }
        });

        FSDIsconnect.setText("Disconnect");
        FSDIsconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FSDIsconnectActionPerformed(evt);
            }
        });

        jLabel8.setText("Port:");

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("Connect to Group Server");

        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("Connect to  File Server");

        GSUsernameTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GSUsernameTFActionPerformed(evt);
            }
        });

        FSTA.setColumns(20);
        FSTA.setEditable(false);
        FSTA.setRows(5);
        jScrollPane2.setViewportView(FSTA);

        FSSubmit.setText("Submit");
        FSSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FSSubmitActionPerformed(evt);
            }
        });

        GSGroupNameTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GSGroupNameTFActionPerformed(evt);
            }
        });

        FSSourceFileTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FSSourceFileTFActionPerformed(evt);
            }
        });

        FSDestFileTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FSDestFileTFActionPerformed(evt);
            }
        });

        FSGroupNameTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FSGroupNameTFActionPerformed(evt);
            }
        });

        jLabel4.setText("Source Filename");

        jLabel6.setText("Destination Filename");

        jLabel7.setText("Group Name");

        jLabel11.setText("Username");

        jLabel12.setText("Group Name");

        jLabel13.setText("Password:");

        jLabel14.setText("IP:");

        jLabel15.setText("IP:");
        //set default value
        GSIPTF.setText("localhost");
        GSPortTF.setText("8765");
        usernameTF.setText("admin");
        passwordTF.setText("admin");
        FSIPTF.setText("localhost");
        FSPortTF.setText("4321");
        
        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(87, 87, 87)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel12)
                                    .addComponent(jLabel11))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(GSUsernameTF, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(GSGroupNameTF, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(41, 41, 41))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 273, Short.MAX_VALUE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel15)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(FSIPTF, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(13, 13, 13)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel8))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(GSCommand, 0, 148, Short.MAX_VALUE)
                                .addGap(27, 27, 27))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)))
                        .addComponent(GSSubmit)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(FSPortTF, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(FSConnect, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(FSDIsconnect))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7))
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(FSGroupNameTF)
                            .addComponent(FSDestFileTF)
                            .addComponent(FSSourceFileTF, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(FSCommand, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(FSSubmit)))
                .addGap(91, 91, 91))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, 751, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, 751, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(usernameTF, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(passwordTF, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jLabel14)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(GSIPTF, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(GSPortTF, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(GSConnect, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(GSDisconnect)
                .addContainerGap(69, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {FSCommand, GSCommand});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(usernameTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13)
                    .addComponent(passwordTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14)
                    .addComponent(GSIPTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(GSPortTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(GSConnect)
                    .addComponent(GSDisconnect))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FSDIsconnect)
                    .addComponent(FSConnect)
                    .addComponent(FSPortTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(jLabel15)
                    .addComponent(FSIPTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(32, 32, 32)
                                        .addComponent(FSCommand, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(FSSubmit)
                                .addGap(35, 35, 35)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(FSSourceFileTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(FSDestFileTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(FSGroupNameTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addGap(18, 18, 18))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(GSCommand, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(GSSubmit)
                                .addGap(17, 17, 17)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(GSUsernameTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12)
                            .addComponent(GSGroupNameTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(24, 24, 24)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(32, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>

	private void GSSubmitActionPerformed(java.awt.event.ActionEvent evt) {
		token = groupClient.getToken(gSharedKey, fileServerName);
		String user = GSUsernameTF.getText();
		String group = GSGroupNameTF.getText();
		String output = "\n";
		if(!GSConnected){
			output += "Group Server not connected";
		}
		else{
			switch(GSCommand.getSelectedIndex()){
			case 0:{
				if(groupClient.createUser(user, token, gSharedKey)){
					output += "User created successfully!";
				}
				else{
					output += "User create failed!";
				}
			}break;
			case 1:{
				if(groupClient.deleteUser(user, token, gSharedKey)){
					output += "User deleted successfully!";
				}
				else{
					output += "User delete failed!";
				}
			}break;
			case 2:{
				if(groupClient.createGroup(group, token, gSharedKey)){
					output += "Group created successfully!";
				}
				else{
					output += "Group create failed!";
				}
			}break;
			case 3:{
				if(groupClient.deleteGroup(group, token, gSharedKey)){
					output += "Group deleted successfully!";
				}
				else{
					output += "Group delete failed!";
				}
			}break;
			case 4:{
				if(groupClient.addUserToGroup(user, group, token, gSharedKey)){
					output += "Added user to group successfully!";
				}
				else{
					output += "Add user to group failed!";
				}
			}break;
			case 5:{
				if(groupClient.deleteUserFromGroup(user, group, token, gSharedKey)){
					output += "Deleted user from group successfully!";
				}
				else{
					output += "Delete user from group failed!";
				}
			}break;
			case 6:{
				List<String> result = groupClient.listMembers(group, token, gSharedKey);
				if(result != null){
					output += "Group size: " + result.size() + "\nGroup Members:";
					for(String temp : result){
						output += "\n" + temp;
					}
				}
				else{
					output += "no such group!";
				}
			}break;
			}
		}
		GSOutput.append(output);
		GSTA.setText(GSOutput.toString());
		GSUsernameTF.setText("");
		GSGroupNameTF.setText("");
		
	}

	private void usernameTFActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:

	}

	private void FSSubmitActionPerformed(java.awt.event.ActionEvent evt) {
		System.out.println("getting token...");
		token = groupClient.getToken(gSharedKey, fileServerName);
		System.out.println("Token get successful");
		String source = FSSourceFileTF.getText();
		String destination = FSDestFileTF.getText();
		String group = FSGroupNameTF.getText();
		String output = "\n";
		if(!FSConnected){
			output += "File Server is not connected!";
		}
		else{
			switch(FSCommand.getSelectedIndex()){
			case 0:{
				System.out.println("ListFile");
				List<String> result = fileClient.listFiles(token, fSharedKey);
				if(result != null){
					output += "Total file: " + result.size() + "\nFile List:";
					for(String temp : result){
						output += "\n" + temp;
					}
				}
				else{
					output += "error list file";
				}
			}break;
			case 1:{
				if(fileClient.upload(source, destination, group, token, fSharedKey)){
					output += "File uploaded successfully!";
				}
				else{
					output += "File upload failed!";
				}
			}break;
			case 2:{
				if(fileClient.download(source, destination, token, fSharedKey)){
					output += "File downloaded successfully!";
				}
				else{
					output += "File download failed!";
				}
			}break;
			case 3:{
				if(fileClient.delete(source, token, fSharedKey)){
					output += "File deleted successfully!";
				}
				else{
					output += "File delete failed!";
				}
			}break;
			}
		}
		FSOutput.append(output);
		FSTA.setText(FSOutput.toString());
		FSSourceFileTF.setText("");
		FSDestFileTF.setText("");
		FSGroupNameTF.setText("");
	}

	private void GSCommandActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
	}

	private void GSPortTFActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
	}

	private void GSConnectActionPerformed(java.awt.event.ActionEvent evt) {
		String output = "\n";
		if(GSConnected){
			output += "Group Server already connected";
		}
		else{
			String IP = GSIPTF.getText();
			int port = Integer.parseInt(GSPortTF.getText());
			userT = usernameTF.getText();
			groupClient = new GroupClient();
			if(groupClient.connect(IP, port)){
				output += "Group Server Connect Successfull\nAttempting to Login\n";
				groupServerKey = groupClient.getPublicKey();
				if(groupServerKey != null){
					String fingerprint = Crypt.getFingerprint(groupServerKey);
					String title = "Please confirm Group Server's Public Key Finger Print";
					JFrame frame = new JFrame();
					int n = JOptionPane.showConfirmDialog(frame,fingerprint,title,JOptionPane.YES_NO_OPTION);
					if(n == JOptionPane.YES_OPTION){
						gSharedKey = Crypt.generateAESKey(128);
						byte[] mergedData = merge(gSharedKey, usernameTF.getText(), new String(passwordTF.getPassword()));
						byte[] encryptedLogin = Crypt.RSAEncrypt(mergedData, groupServerKey);
						boolean loginSuccess = groupClient.login(encryptedLogin, 128/8);
						if(loginSuccess){
							output += "Login successful.";
							GSConnected = true;
						}
						else{
							output += "Login fail.\nDisconnecting....";
							groupClient.disconnect();
						}
					}
					else{
						output += "Public Key not recognized\nDisconnecting.....";
						groupClient.disconnect();
					}
				}
				else{
					output += "Getting Group Server Public key Failed\nDisconnecting....";
					groupClient.disconnect();
				}
			}
			else{
				output += "Group Server Connection Failed";
				groupClient.disconnect();
			}
		}
		GSOutput.append(output + "\n");
		GSTA.setText(GSOutput.toString());
	}

	private void GSDisconnectActionPerformed(java.awt.event.ActionEvent evt) {
		String output = "\n";
		if(GSConnected){
			groupClient.disconnect(gSharedKey);
			GSConnected = false;
			output += "Group Server disconnect!";
		}
		else{
			output += "Error - Group Server not Connected!";
		}
		GSOutput.append(output);
		GSTA.setText(GSOutput.toString());
	}

	private void FSPortTFActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
	}

	private void FSConnectActionPerformed(java.awt.event.ActionEvent evt) {
		String output = "\n";
		if(FSConnected){
			output += "File Server already connected";
		}
		else{
			String IP = FSIPTF.getText();
			int port = Integer.parseInt(FSPortTF.getText());
			fileClient = new FileClient();
			if(fileClient.connect(IP, port)){
				output += "File Server Connect Successfull\nVerifying File Server\n";
				fileServerKey = fileClient.getPublicKey();
				if(fileServerKey != null){
					System.out.println("getting finger print");
					String fingerprint = Crypt.getFingerprint(fileServerKey);
					String title = "Please confirm File Server's Public Key Finger Print";
					JFrame frame = new JFrame();
					System.out.println("showing joptionpane");
					int n = JOptionPane.showConfirmDialog(frame,fingerprint,title,JOptionPane.YES_NO_OPTION);
					if(n == JOptionPane.YES_OPTION){
						fSharedKey = Crypt.generateAESKey(128);
						Random r = new Random();
						int challenge = r.nextInt();
						byte[] cByte = intToByteArray(challenge);
						
						byte[] merge = new byte[cByte.length + fSharedKey.length];
						System.arraycopy(fSharedKey,0,merge,0,fSharedKey.length);
						System.arraycopy(cByte,0,merge,fSharedKey.length,cByte.length);
						
						byte[] encryptedMerge = Crypt.RSAEncrypt(merge, fileServerKey);
						//byte[] rChallenge = fileClient.challenge(encryptedMerge, 128/8);
						ArrayList<Object> arr = fileClient.challenge(encryptedMerge, 128/8);
						byte[] rChallenge = (byte[])arr.get(0);
						String serverName = (String)arr.get(1);
						
						if(Arrays.equals(rChallenge, cByte)){
							output += "Login successful.";
							fileServerName = serverName;
							output += "\nFile Server Name is " + fileServerName;
							FSConnected = true;
						}
						else{
							output += "Login fail.\nDisconnecting....";
							fileClient.disconnect();
						}
					}
					else{
						output += "Public Key not recognized\nDisconnecting.....";
						fileClient.disconnect();
					}
				}
				else{
					output += "Getting File Server Public key Failed\nDisconnecting....";
					fileClient.disconnect();
				}
			}
			else{
				output += "Connection Failed - must connect to Group Server First";
				fileClient.disconnect();
			}
		}
		FSOutput.append(output);
		FSTA.setText(FSOutput.toString());
	}

	private void FSDIsconnectActionPerformed(java.awt.event.ActionEvent evt) {
		String output = "\n";
		if(FSConnected){
			fileClient.disconnect(fSharedKey);
			FSConnected = false;
			output += "File Server disconnect!";
		}
		else{
			output += "Error - File Server not Connected!";
		}
		FSOutput.append(output);
		FSTA.setText(FSOutput.toString());
	}

	private void FSCommandActionPerformed(java.awt.event.ActionEvent evt) {

	}

	private void GSUsernameTFActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
	}

	private void GSGroupNameTFActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
	}

	private void FSSourceFileTFActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
	}

	private void FSDestFileTFActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
	}

	private void FSGroupNameTFActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
	}

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
		/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
		 * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(GUIClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(GUIClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(GUIClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(GUIClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		//</editor-fold>



		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {       

			public void run() {
				new GUIClient().setVisible(true);
			}
		});
	}
	
	//merge the key, username and password into byte array
	public static byte[] merge(byte[] key, String username, String password){
		String up = username + "\n" + password;
		byte[] merge = new byte[key.length + up.getBytes().length];
		System.arraycopy(key,0,merge,0,key.length);
		System.arraycopy(up.getBytes(),0,merge,key.length,up.getBytes().length);
		return merge;
	}
	
	//convert int to byte array
	public static final byte[] intToByteArray(int value) {
	    return new byte[] {
	            (byte)(value >>> 24),
	            (byte)(value >>> 16),
	            (byte)(value >>> 8),
	            (byte)value};
	}

	// Variables declaration - do not modify
    private javax.swing.JComboBox FSCommand;
    private javax.swing.JButton FSConnect;
    private javax.swing.JButton FSDIsconnect;
    private javax.swing.JTextField FSDestFileTF;
    private javax.swing.JTextField FSGroupNameTF;
    private javax.swing.JTextField FSIPTF;
    private javax.swing.JTextField FSPortTF;
    private javax.swing.JTextField FSSourceFileTF;
    private javax.swing.JButton FSSubmit;
    private javax.swing.JTextArea FSTA;
    private javax.swing.JComboBox GSCommand;
    private javax.swing.JButton GSConnect;
    private javax.swing.JButton GSDisconnect;
    private javax.swing.JTextField GSGroupNameTF;
    private javax.swing.JTextField GSIPTF;
    private javax.swing.JTextField GSPortTF;
    private javax.swing.JButton GSSubmit;
    private javax.swing.JTextArea GSTA;
    private javax.swing.JTextField GSUsernameTF;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPasswordField passwordTF;
    private javax.swing.JTextField usernameTF;
    // End of variables declaration
}